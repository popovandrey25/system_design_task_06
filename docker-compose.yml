version: "3.9"
services:
  postgres_db:
    image: postgres:14
    container_name: postgres_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d user_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: secret
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  mongo_db:
    image: mongo:5
    container_name: mongo_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  cache:
    container_name: cache
    image: redis:7.2.4-alpine
    restart: always
    volumes:
      - cache_redis:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    ports:
      - "6379:6379"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: [ "CMD-SHELL", "echo > /dev/tcp/localhost/9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  user_service:
    build: ./user_service
    container_name: user_service
    depends_on:
      postgres_db:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:secret@postgres_db:5432/user_db

  route_service:
    build: ./route_service
    container_name: route_service
    depends_on:
      kafka:
        condition: service_healthy
      mongo_db:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8001:8000"

  route_writer:
    build: ./route_writer
    container_name: route_writer
    depends_on:
      kafka:
        condition: service_healthy
      mongo_db:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MONGODB_URL=mongodb://mongo_db:27017
      - MONGODB_DB=route_db

  trip_service:
    build: ./trip_service
    container_name: trip_service
    ports:
      - "8002:8000"

volumes:
  db_data:
  mongo_data:
  cache_redis: